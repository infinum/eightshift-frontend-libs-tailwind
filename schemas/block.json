{
	"title": "JSON schema for Eightshift blocks used in block manifest.json",
	"$schema": "http://json-schema.org/draft-04/schema#",
	"type": "object",
	"properties": {
		"$schema": {
			"type": "string"
		},
		"active": {
			"type": "boolean",
			"description": "Set to `false` if you don't want the block to be registered.",
			"default": true
		},
		"blockName": {
			"type": "string",
			"pattern": "^[^\/][a-z0-9-]*$",
			"description": "Block name. Should be unique!"
		},
		"title": {
			"type": "string",
			"description": "Name of the block, shown in the Inserter, Sidebar, ..."
		},
		"category": {
			"description": "To improve user experience, you can categorize blocks. The default category is `eightshift`, more can be added with hooks in `src/Blocks/Blocks.php`.",
			"anyOf": [{
					"type": "string"
				},
				{
					"enum": [
						"text",
						"media",
						"design",
						"widgets",
						"theme",
						"embed"
					]
				}
			],
			"default": "eightshift"
		},
		"parent": {
			"type": "array",
			"description": "If set, this block will only be available within the provided block. For example, if a _Columns_ block can only have _Column_ blocks as children, set `parent` to the _Columns_ block in the _Column_ block manifest.",
			"items": {
				"type": "string"
			}
		},
		"icon": {
			"type": "object",
			"description": "Icon to identify the block. The icon is shown in various places within the Block editor.",
			"properties": {
				"background": {
					"type": "string",
					"description": "Block icon background color. If not set, value from Global manifest is used."
				},
				"foreground": {
					"type": "string",
					"description": "Block icon color. If not set, value from Global manifest is used."
				},
				"src": {
					"type": "string",
					"description": "Icon source, can be either Eightshift icons (`es-` prefix), SVG strings, or Dashicon name."
				}
			},
			"additionalProperties": false
		},
		"description": {
			"type": "string",
			"description": "A short description of the block, shown in a couple of places in the Block editor, e.g. options sidebar."
		},
		"keywords": {
			"type": "array",
			"description": "Additional keywords to help users find the block. Keywords are used when searching for blocks.",
			"items": {
				"type": "string"
			}
		},
		"attributes": {
			"type": "object",
			"description": "Source of truth for data used within the block. Check the [https://developer.wordpress.org/block-editor/reference-guides/block-api/block-attributes/](documentation) for more details.",
			"patternProperties": {
				"[a-zA-Z]": {
					"type": "object",
					"properties": {
						"type": {
							"description": "The type indicates the type of data that is stored by the attribute. It does not indicate where the data is stored, which is defined by the source field.\n\nA type is required, unless an enum is provided. A type can be used with an enum.\n\nNote that the validity of an object is determined by your source. For an example, see the query details below.",
							"oneOf": [{
									"type": "string",
									"enum": [
										"null",
										"boolean",
										"object",
										"array",
										"string",
										"integer",
										"number"
									]
								},
								{
									"type": "array",
									"uniqueItems": true,
									"items": {
										"type": "string",
										"enum": [
											"null",
											"boolean",
											"object",
											"array",
											"string",
											"integer",
											"number"
										]
									}
								}
							]
						},
						"enum": {
							"type": "array",
							"description": "An attribute can be defined as one of a fixed set of values. This is specified by an enum, which contains an array of allowed values:",
							"items": {
								"oneOf": [{
										"type": "boolean"
									},
									{
										"type": "number"
									},
									{
										"type": "string"
									}
								]
							}
						},
						"source": {
							"type": "string",
							"description": "Attribute sources are used to define how the attribute values are extracted from saved post content. They provide a mechanism to map from the saved markup to a JavaScript representation of a block.",
							"enum": [
								"attribute"
							]
						},
						"attribute": {
							"type": "string",
							"description": "Use an attribute source to extract the value from an attribute in the markup. The attribute is specified by the attribute field, which must be supplied.\n\nExample: Extract the src attribute from an image found in the block's markup."
						}
					},
					"required": [
						"type"
					]
				}
			},
			"additionalProperties": false
		},
		"example": {
			"type": "object",
			"description": "Data for the block preview, shown in the Inserter when hovering over block names.",
			"properties": {
				"attributes": {
					"type": "object",
					"description": "Set the attribues for the block example"
				},
				"innerBlocks": {
					"type": "array",
					"description": "Set the inner blocks that should be used within the block example. The blocks should be defined as a nested array like this: \n\n [ [ 'core/heading', { content: 'This is an Example' }, [] ] ]\n\n Where each block itself is an array that contains the block name, the block attributes, and the blocks inner blocks."
				}
			}
		},
		"hasInnerBlocks": {
			"type": "boolean",
			"description": "Set to `true` if the block needs to support `InnerBlocks`. You can then use `$renderContent` in the PHP view file to render the inner blocks.",
			"default": false
		},
		"components": {
			"type": "object",
			"description": "Defines components used within the block. Component attributes can be provided with the `props` function. Check the [documentation](https://eightshift.com/docs/basics/blocks-component-in-block/) for more info."
		},
		"options": {
			"type": "object",
			"description": "Defines common option presets for attributes. Check the [documentation](https://eightshift.com/docs/basics/blocks-component-in-block/) for more info."
		}
	},
	"required": [
		"blockName",
		"title"
	]
}
