{
	"title": "JSON schema for Eightshift components",
	"$schema": "http://json-schema.org/draft-04/schema#",
	"type": "object",
	"properties": {
		"$schema": {
			"type": "string"
		},
		"componentName": {
			"type": "string",
			"pattern": "^[^\/][a-z0-9-]*$",
			"description": "Unique identifier for the component."
		},
		"title": {
			"type": "string",
			"description": "User-facing name of the component."
		},
		"description": {
			"type": "string",
			"description": "A short description of the component."
		},
		"attributes": {
			"type": "object",
			"description": "Source of truth for data used within the component. Check https://developer.wordpress.org/block-editor/reference-guides/block-api/block-attributes/ for more details.",
			"patternProperties": {
				"[a-zA-Z]": {
					"type": "object",
					"properties": {
						"type": {
							"description": "The type indicates the type of data that is stored by the attribute. It does not indicate where the data is stored, which is defined by the source field.\n\nA type is required, unless an enum is provided. A type can be used with an enum.\n\nNote that the validity of an object is determined by your source. For an example, see the query details below.",
							"oneOf": [
								{
									"type": "string",
									"enum": [
										"null",
										"boolean",
										"object",
										"array",
										"string",
										"integer",
										"number"
									]
								},
								{
									"type": "array",
									"uniqueItems": true,
									"items": {
										"type": "string",
										"enum": [
											"null",
											"boolean",
											"object",
											"array",
											"string",
											"integer",
											"number"
										]
									}
								}
							]
						},
						"enum": {
							"type": "array",
							"description": "An attribute can be defined as one of a fixed set of values. This is specified by an enum, which contains an array of allowed values:",
							"items": {
								"oneOf": [
									{
										"type": "boolean"
									},
									{
										"type": "number"
									},
									{
										"type": "string"
									}
								]
							}
						},
						"source": {
							"type": "string",
							"description": "Attribute sources are used to define how the attribute values are extracted from saved post content. They provide a mechanism to map from the saved markup to a JavaScript representation of a block.",
							"enum": [
								"attribute"
							]
						},
						"attribute": {
							"type": "string",
							"description": "Use an attribute source to extract the value from an attribute in the markup. The attribute is specified by the attribute field, which must be supplied.\n\nExample: Extract the src attribute from an image found in the block's markup."
						}
					},
					"required": [
						"type"
					]
				}
			},
			"additionalProperties": false
		},
		"example": {
			"type": "object",
			"description": "Sample data to showcase the component.",
			"properties": {
				"attributes": {
					"type": "object",
					"description": "Set the attribues for the block example"
				},
				"innerBlocks": {
					"type": "array",
					"description": "Set the inner blocks that should be used within the block example. The blocks should be defined as a nested array like this: \n\n [ [ 'core/heading', { content: 'This is an Example' }, [] ] ]\n\n Where each block itself is an array that contains the block name, the block attributes, and the blocks inner blocks."
				}
			}
		},
		"components": {
			"type": "object",
			"description": "Defines components included in this component. Component attributes can be used with the 'props' function. Check https://eightshift.com/docs/basics/blocks-component-in-block/ for more info."
		},
		"options": {
			"type": "object",
			"description": "Defines common option definitions for attributes. Check https://eightshift.com/docs/basics/blocks-component-in-block/ for more info."
		},
		"tailwind": {
			"type": "object",
			"description": "Defines shared Tailwind configs for the component. 'base' sets the base classes for the main part of the component. The base is augmented by 'options' and 'combinations', if set. 'parts' can be used for static/supporting parts of the component.",
			"properties": {
				"base": {
					"type": "object",
					"description": "Base classes for the main part of the component.",
					"properties": {
						"twClasses": {
							"type": "string",
							"description": "Classnames to apply."
						},
						"twClassesEditor": {
							"type": "string",
							"description": "Editor-specific classnames to apply. Overrides 'twClasses'"
						}
					},
					"minProperties": 1
				},
				"options": {
					"type": "object",
					"description": "Per-attribute classes, added to the base class. Key represents the attribute name.",
					"additionalProperties": {
						"$ref": "#/$defs/twOptionsEntry"
					},
					"minProperties": 1
				},
				"parts": {
					"type": "object",
					"description": "Stand-alone parts of the component, not affected by 'options' or 'combinations'. Key represents the part name.",
					"additionalProperties": {
						"$ref": "#/$defs/twPartEntry"
					},
					"minProperties": 1
				},
				"combinations": {
					"type": "array",
					"description": "Conditionally applied classes, depending on the set attribute values. Added to the base class.",
					"items": {
						"type": "object",
						"properties": {
							"attributes": {
								"type": "object",
								"description": "Attributes to check for the condition. Key is the attribute name, value is the attribute value (or an array of possible values) to check for.",
								"patternProperties": {
									"[a-zA-Z]": {
										"anyOf": [
											{
												"type": "string",
												"minLength": 1
											},
											{
												"type": "array",
												"items": {
													"type": "string",
													"minLength": 1
												}
											}
										]
									}
								}
							},
							"twClasses": {
								"type": "string",
								"description": "Classnames to apply if all conditions match. Key is the attribute value, value is the classnames to apply."
							},
							"twClassesEditor": {
								"type": "string",
								"description": "Editor-specific classnames to apply if all conditions match. Overrides 'twClasses'. Key is the attribute value, value is the classnames to apply."
							}
						},
						"required": [
							"attributes",
							"twClasses"
						]
					},
					"minLength": 1
				}
			},
			"minProperties": 1
		}
	},
	"required": [
		"componentName",
		"title"
	],
	"$defs": {
		"twPartEntry": {
			"type": "object",
			"properties": {
				"twClasses": {
					"type": "string",
					"description": "Classnames to apply. Key is the attribute value, value is the classnames to apply."
				},
				"twClassesEditor": {
					"type": "string",
					"description": "Editor-specific classnames to apply. Overrides 'twClasses'. Key is the attribute value, value is the classnames to apply."
				}
			}
		},
		"twOptionsEntry": {
			"type": "object",
			"properties": {
				"twClasses": {
					"type": "string",
					"description": "Classnames to apply. Key is the attribute value, value is the classnames to apply."
				},
				"twClassesEditor": {
					"type": "string",
					"description": "Editor-specific classnames to apply. Overrides 'twClasses'. Key is the attribute value, value is the classnames to apply."
				}
			}
		}
	}
}
